import random
import numpy as np

def simulate_bolt_dmg(combo_rate, extra_combo_rate, default_bolt, matches=1000, rounds_per_match=15):
    # Simulate with base combo rate
    total_bolts_base_all = 0
    match_boosts = []
    
    for _ in range(matches):
        rage = 0
        total_bolts_base_match = 0
        total_bolts_extra_match = 0
        
        # Simulate 15 rounds for base combo rate
        for _ in range(rounds_per_match):
            # Default bolt + basic attack: 1 bolt, +50 rage
            bolts_base = default_bolt + 1
            rage = rage + 50
            
            # Check exactly 2 combos
            for _ in range(2):
                if random.random() < combo_rate:
                    rage += 25
            
            # Rage skill at end: 3 bolts if rage >= 100, reset to 0
            if rage >= 100:
                bolts_base += 3
                rage = 0
            
            total_bolts_base_match += bolts_base
        
        # Simulate same 15 rounds for extra combo rate
        rage = 0
        for _ in range(rounds_per_match):
            # Default bolt + basic attack: 1 bolt, +50 rage
            bolts_extra = default_bolt + 1
            rage = rage + 50
            
            # Check exactly 2 combos with extra_combo_rate
            for _ in range(2):
                if random.random() < extra_combo_rate:
                    rage += 25
            
            # Rage skill at end: 3 bolts if rage >= 100, reset to 0
            if rage >= 100:
                bolts_extra += 3
                rage = 0
            
            total_bolts_extra_match += bolts_extra
        
        total_bolts_base_all += total_bolts_base_match
        # Calculate match-level percentage boost
        if total_bolts_base_match > 0:
            match_boost = ((total_bolts_extra_match - total_bolts_base_match) / total_bolts_base_match) * 100
        else:
            match_boost = 0
        match_boosts.append(match_boost)
    
    # Calculate averages
    avg_bolts_base = total_bolts_base_all / (matches * rounds_per_match)
    total_bolts_extra_all = sum(
        sum(default_bolt + 1 + (3 if (rage := (rage + 50 + sum(25 for _ in range(2) if random.random() < extra_combo_rate)) >= 100 and not (rage := 0)) else 0)
            for _ in range(rounds_per_match))
        for _ in range(matches)
    )
    avg_bolts_extra = total_bolts_extra_all / (matches * rounds_per_match)
    
    # Overall percentage boost
    if avg_bolts_base > 0:
        overall_boost = ((avg_bolts_extra - avg_bolts_base) / avg_bolts_base) * 100
    else:
        overall_boost = 0
    
    # Variance and IQR of match-level boosts
    variance_boosts = np.var(match_boosts)
    q25, q75 = np.percentile(match_boosts, [25, 75])
    iqr_boosts = q75 - q25
    
    return avg_bolts_base, avg_bolts_extra, overall_boost, variance_boosts, q25, q75, iqr_boosts

def main():
    print("Bolt Damage Calculator")
    print("Weapon: 1 bolt on basic attack, 3 bolts on rage skill, plus default bolts")
    print("Rage: 50 from basic, 25 from each of 2 combos, 100 to trigger at round end, reset to 0")
    print("Simulation: 1000 matches of 15 rounds each")
    
    # Get default bolt
    while True:
        try:
            default_bolt = float(input("Enter default bolts per round (non-negative): "))
            if default_bolt >= 0:
                break
            print("Please enter a non-negative number.")
        except ValueError:
            print("Please enter a valid number.")
    
    # Get combo rate
    while True:
        try:
            combo_rate = float(input("Enter combo trigger rate (0 to 1, e.g., 0.5 for 50%): "))
            if 0 <= combo_rate <= 1:
                break
            print("Please enter a number between 0 and 1.")
        except ValueError:
            print("Please enter a valid number.")
    
    # Get extra combo rate
    while True:
        try:
            extra_combo_rate = float(input("Enter extra combo trigger rate (0 to 1): "))
            if 0 <= extra_combo_rate <= 1:
                break
            print("Please enter a number between 0 and 1.")
        except ValueError:
            print("Please enter a valid number.")
    
    # Calculate and display results
    avg_bolts_base, avg_bolts_extra, overall_boost, variance_boosts, q25, q75, iqr_boosts = simulate_bolt_dmg(
        combo_rate, extra_combo_rate, default_bolt
    )
    print(f"\nAverage bolts per round (base combo rate): {avg_bolts_base:.4f}")
    print(f"Average bolts per round (with extra combo rate): {avg_bolts_extra:.4f}")
    print(f"Overall percentage boost from extra combo rate: {overall_boost:.2f}%")
    print(f"Variance of match-level percentage boosts: {variance_boosts:.4f}")
    print(f"Interquartile range of match-level percentage boosts: Q3 ({q75:.4f}) - Q1 ({q25:.4f}) = {iqr_boosts:.4f}")

if __name__ == "__main__":
    main()